name: Build

on:
  push:
    branches: [ master, develop ]
  workflow_dispatch:

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.6
        with:
          versionSpec: '5.x'
      - name: Use GitVersion
        id: gitversion # step id used as reference for output values
        uses: gittools/actions/gitversion/execute@v0.9.6
        with:
          useConfigFile: true
          showConfig: true
          configFilePath: ./gitversion.yml
      - name: Display SemVer
        run: |
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"

  release:
    runs-on: ubuntu-latest
    needs: version
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.version.outputs.version }}
          release_name: lemmymod-${{ needs.version.outputs.version }}
          draft: false
          prerelease: ${{ github.ref == 'refs/heads/develop' }}
      - name: Create Backend ZIP deployment package
        run: zip -r lemmymod-${{ needs.version.outputs.version }}.zip . -x@exclude.lst;
      - name: Upload ZIP as Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./lemmymod-${{ needs.version.outputs.version }}.zip
          asset_name: lemmymod-${{ needs.version.outputs.version }}.zip
          asset_content_type: application/zip

  docker:
    runs-on: ubuntu-latest
    needs: version
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - id: repo
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.repository }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/${{ steps.repo.outputs.lowercase }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64, linux/arm64
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            ghcr.io/${{ steps.repo.outputs.lowercase }}:latest
            ghcr.io/${{ steps.repo.outputs.lowercase }}:${{ needs.version.outputs.version }}
  pypi:
    runs-on: ubuntu-latest
    needs: [version, release]
    permissions:
      id-token: write
    environment:
      name: pypi
      url: https://pypi.org/p/lemmymodbot-test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Find and Replace
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "{{VERSION_PLACEHOLDER}}"
          replace: "${{ needs.version.outputs.version }}"
          regex: false
      - name: Find and Replace
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "{{PACKAGE_NAME_PLACEHOLDER}}"
          replace: "${{ vars.PYPI_PACKAGE_NAME }}"
          regex: false
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Install pypa/build
        run: >-
          python3 -m
          pip install
          build
          --user
      - name: Build a binary wheel and a source tarball
        run: python3 -m build
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
